#include<stdio.h>
#include<stdlib.h>

typedef union z z;
union z
{
  char ch;
  unsigned char uc;
  signed char sc;
  short sh;
  unsigned short us;
  signed short ss;
  int in;
  unsigned int ui;
  signed int si;
  long lo;
  unsigned long lu;
  signed long ls;
  long long ll;
  unsigned long long ul;
  signed long long sl;
  float fl;
  double db;
  long double ld;
  z *y;
  z (*f0)();
  z (*f1)(z);
  z (*f2)(z,z);
  z (*f3)(z,z,z);
  z (*f4)(z,z,z,z);
  z (*f5)(z,z,z,z,z);
  z (*f6)(z,z,z,z,z,z);
  z (*f7)(z,z,z,z,z,z,z);
  z (*f8)(z,z,z,z,z,z,z,z);
  z (*f9)(z,z,z,z,z,z,z,z,z);
  z (*f10)(z,z,z,z,z,z,z,z,z,z);
  z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
  z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
};
typedef char ch;
typedef unsigned char uc;
typedef signed char sc;
typedef short sh;
typedef unsigned short us;
typedef signed short ss;
typedef int in;
typedef unsigned int ui;
typedef signed int si;
typedef long lo;
typedef unsigned long lu;
typedef signed long ls;
typedef long long ll;
typedef unsigned long long ul;
typedef signed long long sl;
typedef float fl;
typedef double db;
typedef long double ld;
typedef z *y;
typedef z (*f0)();
typedef z (*f1)(z);
typedef z (*f2)(z,z);
typedef z (*f3)(z,z,z);
typedef z (*f4)(z,z,z,z);
typedef z (*f5)(z,z,z,z,z);
typedef z (*f6)(z,z,z,z,z,z);
typedef z (*f7)(z,z,z,z,z,z,z);
typedef z (*f8)(z,z,z,z,z,z,z,z);
typedef z (*f9)(z,z,z,z,z,z,z,z,z);
typedef z (*f10)(z,z,z,z,z,z,z,z,z,z);
typedef z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
ul const block=4;

z n()
{
  z result;
  result.y=(y)malloc((block+1)*sizeof(z));
  result.y+=block-1;
  result.y[0].ul=1;
  result.y[1].ul=0;
  return result;
}

ul e(z object)
{
  return object.y[0].ul;
}

void display(z object)
{
  printf("(%llu)",e(object)-1);
  ul i;
  for(i=2;i<=e(object);++i)
  {
    printf("%c",object.y[i].uc);
  }
}

void displayLine(z object)
{
  display(object);
  printf("\n");
}

void displaySpace(z object)
{
  display(object);
  printf(" ");
}

ul size(ul extent)
{
  return (extent==0)?block:((extent-1)/block+1)*block;
}

z c(z object)
{
  ul sz=size(e(object));
  z result;
  result.y=(y)malloc((sz+1)*sizeof(z));
  result.y+=sz-e(object);
  ul i;
  for(i=0;i<=e(object);++i)
  {
    result.y[i]=object.y[i];
  }
  return result;
}

void f(z stack)
{
  ul sz=size(e(stack));
  stack.y-=sz-e(stack);
  free(stack.y);
}

z ps(z object,z stack)
{
  ul sz=size(e(stack)+1);
  if(e(stack)+block==sz)
  {
    z result;
    result.y=(y)malloc((sz+1)*sizeof(z));
    result.y+=sz-e(stack)-1;
    result.y[0].ul=e(stack)+1;
    result.y[1].ul=0;
    result.y[2]=object;
    ++result.y;
    ul i;
    for(i=2;i<=e(stack);++i)
    {
     result.y[i]=stack.y[i];
    }
    --result.y;
    f(stack);
    return result;
  }
  else
  {
    --stack.y;
    stack.y[0].ul=stack.y[1].ul+1;
    stack.y[1].ul=0;
    stack.y[2]=object;
    return stack;
  }
}

z pp(z stack)
{
  ul sz=size(e(stack)-1);
  if(sz<e(stack))
  {
    z result;
    result.y=(y)malloc((sz+1)*sizeof(z));
    result.y[0].ul=e(stack)-1;
    result.y[1].ul=0;
    ul i;
    ++stack.y;
    for(i=2;i<=e(result);++i)
    {
      result.y[i]=stack.y[i];
    }
    --stack.y;
    f(stack);
    return result;
  }
  else
  {
    stack.y[2].ul=0;
    stack.y[1].ul=e(stack)-1;
    ++stack.y;
    return stack;
  }
}

z tp(z stack)
{
  z result=stack.y[2];
  f(stack);
  return result;
}

z rv(z stack)
{
  ul i;
  z temp;
  ul r=e(stack);
  ul m=(r+1)/2;
  for(i=2;i<=m;++i)
  {
    temp=stack.y[i];
    stack.y[i]=stack.y[r];
    stack.y[r]=temp;
    --r;
  }
  return stack;
}

z mp(z fun,z stack)
{
  ul i;
  for(i=2;i<=e(stack);++i)
  {
    stack.y[i]=fun.f1(stack.y[i]);
  }
  return stack;
}

z kp1(z fun,z stack,z result)
{
  if(e(stack)==1)
  {
    f(stack);
    return result;
  }
  else
  {
    if(fun.f1(tp(c(stack))).uc)
    {
      result=ps(tp(c(stack)),result);
    }
    return kp1(fun,pp(stack),result);
  }
}

z kp(z fun,z stack)
{
  return kp1(fun,rv(stack),n());
}

z rd1(z fun,z stack)
{
  if(e(stack)==2)
  {
    return tp(stack);
  }
  else
  {
    z combined;
    combined=fun.f2(tp(pp(c(stack))),tp(c(stack)));
    stack=pp(pp(stack));
    return rd1(fun,ps(combined,stack));
  }
}

z rd(z fin,z fun,z stack)
{
  return rd1(fun,ps(fin,rv(stack)));
}

z mf(z fun,z stack)
{
  ul i;
  z temp;
  for(i=2;i<=e(stack);++i)
  {
    temp=fun.f1(c(stack.y[i]));
    f(stack.y[i]);
    stack.y[i]=temp;
  }
  return stack;
}

z kf1(z fun,z stack,z result)
{
  if(e(stack)==1)
  {
    f(stack);
    return result;
  }
  else
  {
    if(fun.f1(tp(c(stack))).uc)
    {
      result=ps(tp(c(stack)),result);
      return kf1(fun,pp(stack),result);
    }
    else
    {
      f(stack.y[1]);
      return kf1(fun,pp(stack),result);
    }
  }
}

z kf(z fun,z stack)
{
  return kf1(fun,rv(stack),n());
}

z rf1(z fun,z stack)
{
  if(e(stack)==2)
  {
    return tp(stack);
  }
  else
  {
    z combined;
    combined=fun.f2(c(stack.y[3]),c(stack.y[2]));
    f(stack.y[2]);
    f(stack.y[3]);
    stack=pp(pp(stack));
    return rf1(fun,ps(combined,stack));
  }
}

z rf(z fin,z fun,z stack)
{
  return rf1(fun,ps(fin,rv(stack)));
}

z u(z stack1,z stack2)
{
  ul ex=e(stack1)+e(stack2)+2;
  ul sz=size(ex);
  ul i;
  if(sz==size(e(stack2)))
  {
    stack2.y-=e(stack1)+1;
    for(i=0;i<=e(stack1);++i)
    {
      stack2.y[i]=stack1.y[i];
    }
    --stack2.y;
    stack2.y[0].ul=ex;
    f(stack1);
    return stack2;
  }
  else
  {
    z result;
    result.y=(y)malloc((sz+1)*sizeof(z));
    result.y+=sz-e(stack1)-e(stack2)-2;
    result.y[0].ul=e(stack1)+e(stack2)+2;
    ++result.y;
    for(i=0;i<=e(stack1);++i)
    {
      result.y[i]=stack1.y[i];
    }
    result.y+=e(stack1)+1;
    for(i=0;i<=e(stack2);++i)
    {
      result.y[i]=stack2.y[i];
    }
    result.y-=e(stack1)+1;
    --result.y;
    f(stack1);
    f(stack2);
    return result;
  }
}

z t(z stack)
{
  z result;
  ++stack.y;
  result=c(stack);
  --stack.y;
  f(stack);
  return result;
}

z p(z stack)
{
  z result;
  ++stack.y;
  ul jump=e(stack)+1;
  stack.y+=jump;
  result=c(stack);
  stack.y-=jump;
  --stack.y;
  f(stack);
  return result;
}

z v1(z stack,z result)
{
  if(e(stack)==1)
  {
    f(stack);
    return result;
  }
  else
  {
    result=u(t(c(stack)),result);
    return v1(p(stack),result);
  }
}

z v(z stack)
{
  return v1(stack,n());
}

z m1(z fun,z stack,z result)
{
  if(e(stack)==1)
  {
    f(stack);
    return result;
  }
  else
  {
    result=u(fun.f1(t(c(stack))),result);
    return m1(fun,p(stack),result);
  }
}

z m(z fun,z stack)
{
  return m1(fun,v(stack),n());
}

z k1(z fun,z stack,z result)
{
  if(e(stack)==1)
  {
    f(stack);
    return result;
  }
  else
  {
    z top;
    top=t(c(stack));
    if(fun.f1(top).uc)
    {
      result=u(top,result);
    }
    return k1(fun,p(stack),result);
  }
}

z k(z fun,z stack)
{
  return k1(fun,v(stack),n());
}

z r1(z fun,z stack)
{
  z rest;
  rest=p(c(stack));
  if(e(rest)==1)
  {
    f(rest);
    return t(stack);
  }
  else
  {
    z temp;
    temp=fun.f2(t(rest),t(c(stack)));
    return r1(fun,u(temp,p(p(stack))));
  }
}

z r(z fin,z fun,z stack)
{
  return r1(fun,u(fin,v(stack)));
}

uc as(z value)
{
  uc result=!(e(value)>1&&value.y[1].ul==0&&value.y[2].uc==0);
  f(value);
  return result;
}

z no(z value)
{
  if(as(c(value)))
  {
    z v;
    v.uc=0;
    value=ps(v,value);
    return value;
  }
  else
  {
    return pp(value);
  }
}

z nu(z value)
{
  if(e(value)==1||(e(value)==2&&value.y[1].ul==0&&value.y[2].uc==0))
  {
    f(value);
    return n();
  }
  else if(as(c(value)))
  {
    return no(value);
  }
  else
  {
    return value;
  }
}

z pr(z value)
{
  if(value.y[1].ul==0)
  {
    if(as(nu(c(value))))
    {
      f(value);
      return no(n());
    }
    else
    {
      return no(value);
    }
  }
  else
  {
    return value;
  }
}

z a(z one,z two)
{
  if(as(c(one)))
  {
    f(one);
    return two;
  }
  else
  {
    f(two);
    return one;
  }
}

z o(z one,z two)
{
  if(as(c(one)))
  {
    f(two);
    return one;
  }
  else
  {
    f(one);
    return two;
  }
}

z x(z one,z two)
{
  if(as(c(one)))
  {
    if(as(c(two)))
    {
      f(two);
      return no(one);
    }
    else
    {
      f(one);
      return no(two);
    }
  }
  else
  {
    if(as(c(two)))
    {
      f(one);
      return two;
    }
    else
    {
      f(two);
      return one;
    }
  }
}

z eq1(z one,z two)
{
  if(as(nu(c(one))))
  {
    if(as(nu(two)))
    {
      f(one);
      return n();
    }
    else
    {
      f(one);
      return no(n());
    }
  }
  else
  {
    if(as(nu(c(two))))
    {
      f(one);
      f(two);
      return no(n());
    }
    else
    {
      if(as(pr(c(one))))
      {
        if(as(pr(c(two))))
        {
          if(as(eq1(t(c(one)),t(c(two)))))
          {
            return eq1(p(one),p(two));
          }
          else
          {
            f(one);
            f(two);
            return no(n());
          }
        }
        else
        {
          f(one);
          f(two);
          return no(n());
        }
      }
      else
      {
        if(as(pr(c(two))))
        {
          f(one);
          f(two);
          return no(n());
        }
        else
        {
          if(one.y[2].uc==two.y[2].uc)
          {
            return eq1(pp(one),pp(two));
          }
          else
          {
            f(one);
            f(two);
            return no(n());
          }
        }
      }
    }
  }
}

z eq(z one,z two)//should not compare false
{
  if(as(eq1(one,c(two))))
  {
    return two;
  }
  else
  {
    return no(two);
  }
}

z identity(z object)
{
  return object;
}

z inc(z character)
{
  character.uc+=1;
  return character;
}

z dec(z character)
{
  character.uc-=1;
  return character;
}

z notB(z character)
{
  character.uc=character.uc!='B';
  return character;
}

z notEmpty(z stack)
{
   stack.uc=e(stack)!=1;
   return stack;
}

int main()
{
  z val;
  z fun;
  z fun2;
  z fun3;
  z stack;
  z stack2;
  stack=n();
  val.uc='L';
  stack=ps(val,stack);
  val.uc='A';
  stack=ps(val,stack);
  val.uc='H';
  stack=ps(val,stack);
  val.uc='L';
  stack=ps(val,stack);
  val.uc='A';
  stack=ps(val,stack);
  val.uc='H';
  stack=ps(val,stack);
  val.uc='L';
  stack=ps(val,stack);
  val.uc='A';
  stack=ps(val,stack);
  val.uc='H';
  stack=ps(val,stack);
  val.uc='L';
  stack=ps(val,stack);
  val.uc='A';
  stack=ps(val,stack);
  val.uc='H';
  stack=ps(val,stack);
  val.uc='L';
  stack=ps(val,stack);
  val.uc='A';
  stack=ps(val,stack);
  val.uc='H';
  stack=ps(val,stack);
  displayLine(stack);
  stack2=c(stack);
  fun.f1=&inc;
  stack=mp(fun,stack);
  displayLine(stack);
  fun.f1=&notB;
  stack=kp(fun,stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=rv(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=rv(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=rv(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=rv(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=rv(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=rv(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=rv(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=rv(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=rv(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=rv(stack);
  displayLine(stack);
  stack=ps(c(stack2),stack);
  stack=ps(n(),stack);
  stack=ps(c(stack2),stack);
  fun.f1=&identity;
  stack=mf(fun,stack);

  fun2.f2=&u;
  fun3.f2=&ps;
  stack=rf(n(),fun2,stack);
  stack=r(n(),fun3,stack);
  stack=rf(n(),fun2,stack);
  displayLine(t(c(stack)));
  fun.f1=&notEmpty;
  stack=k(fun,stack);
  displayLine(t(c(stack)));
  stack=v(stack);
  displayLine(t(c(stack)));
  fun.f1=&identity;
  stack=m(fun,stack);
  displayLine(t(c(stack)));
  displayLine(no(n()));
  displayLine(no(no(n())));
  displayLine(nu(no(n())));
  displayLine(nu(no(no(n()))));
  displayLine(nu(t(c(stack))));
  displayLine(pr(no(n())));
  displayLine(pr(no(no(n()))));
  displayLine(pr(t(c(stack))));
  displayLine(t(pr(c(stack))));
  printf("  a\n");
  displayLine(a(no(n()),no(n())));
  displayLine(a(no(n()),n()));
  displayLine(a(n(),no(n())));
  displayLine(a(n(),n()));
  printf("  o\n");
  displayLine(o(no(n()),no(n())));
  displayLine(o(no(n()),n()));
  displayLine(o(n(),no(n())));
  displayLine(o(n(),n()));
  printf("  x\n");
  displayLine(x(no(n()),no(n())));
  displayLine(x(no(n()),n()));
  displayLine(x(n(),no(n())));
  displayLine(x(n(),n()));
  printf("  eq\n");
  displayLine(eq(n(),n()));
  displayLine(eq(n(),t(c(stack))));
  displayLine(eq(t(c(stack)),n()));
  displayLine(eq(t(c(stack)),t(c(stack))));
  displayLine(eq(t(c(stack)),c(stack)));
  displayLine(eq(c(stack),t(c(stack))));
  displayLine(eq(c(stack),c(stack)));
  printf("  eq\n");
  displayLine(eq(u(c(stack),c(stack)),u(c(stack),c(stack))));
  displayLine(eq(c(stack),u(c(stack),c(stack))));

  f(stack);
  return 0;
}
