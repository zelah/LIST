#include<stdio.h>
#include<stdlib.h>

typedef union z z;
union z
{
  char ch;
  unsigned char uc;
  signed char sc;
  short sh;
  unsigned short us;
  signed short ss;
  int in;
  unsigned int ui;
  signed int si;
  long lo;
  unsigned long lu;
  signed long ls;
  long long ll;
  unsigned long long ul;
  signed long long sl;
  float fl;
  double db;
  long double ld;
  z *y;
  z (*f0)();
  z (*f1)(z);
  z (*f2)(z,z);
  z (*f3)(z,z,z);
  z (*f4)(z,z,z,z);
  z (*f5)(z,z,z,z,z);
  z (*f6)(z,z,z,z,z,z);
  z (*f7)(z,z,z,z,z,z,z);
  z (*f8)(z,z,z,z,z,z,z,z);
  z (*f9)(z,z,z,z,z,z,z,z,z);
  z (*f10)(z,z,z,z,z,z,z,z,z,z);
  z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
  z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
};
typedef char ch;
typedef unsigned char uc;
typedef signed char sc;
typedef short sh;
typedef unsigned short us;
typedef signed short ss;
typedef int in;
typedef unsigned int ui;
typedef signed int si;
typedef long lo;
typedef unsigned long lu;
typedef signed long ls;
typedef long long ll;
typedef unsigned long long ul;
typedef signed long long sl;
typedef float fl;
typedef double db;
typedef long double ld;
typedef z *y;
typedef z (*f0)();
typedef z (*f1)(z);
typedef z (*f2)(z,z);
typedef z (*f3)(z,z,z);
typedef z (*f4)(z,z,z,z);
typedef z (*f5)(z,z,z,z,z);
typedef z (*f6)(z,z,z,z,z,z);
typedef z (*f7)(z,z,z,z,z,z,z);
typedef z (*f8)(z,z,z,z,z,z,z,z);
typedef z (*f9)(z,z,z,z,z,z,z,z,z);
typedef z (*f10)(z,z,z,z,z,z,z,z,z,z);
typedef z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
const ul allocationBlockSize=4;

z n()
{
  z result;
  result.y=(y)malloc((allocationBlockSize+1)*sizeof(z));
  result.y+=allocationBlockSize;
  result.y[0].ul=0;
  return result;
}

z e(z one)
{
  return one.y[0];
}

void f(z one)
{
  ul size;
  if(e(one).ul)
  {
    size=allocationBlockSize*((e(one).ul-1)/allocationBlockSize+1);
    one.y-=size-e(one).ul;
  }
  else
  {
    size=allocationBlockSize;
    one.y-=size;
  }
  free(one.y);
}

z c(z one)
{
  ul size=allocationBlockSize*((e(one).ul-1)/allocationBlockSize+1)+1;
  z result;
  result.y=(y)malloc(size*sizeof(z));
  result.y+=size-1-e(one).ul;
  ul i;
  for(i=0;i<size;++i)
  {
    result.y[i]=one.y[i];
  }
  return result;
}

z push(z one,z stack)
{
  uc timeToAllocate=e(stack).ul>0&&e(stack).ul%allocationBlockSize==0;
  if(timeToAllocate)
  {
    ul newSize=e(stack).ul+allocationBlockSize+1;
    z result;
    result.y=(y)malloc(newSize*sizeof(z));
    result.y+=allocationBlockSize-1;
    result.y[0].ul=stack.y[0].ul+1;
    result.y[1]=one;
    ++result.y;
    ul i;
    ul right=allocationBlockSize+1;
    for(i=1;i<right;++i)
    {
      result.y[i]=stack.y[i];
    }
    --result.y;
    f(stack);
    return result;
  }
  else
  {
    --stack.y;
    stack.y[0].ul=stack.y[1].ul+1;
    stack.y[1]=one;
    return stack;
  }
}

z pop(z stack)
{
  uc timeToReclaim=e(stack).ul!=1&&e(stack).ul%allocationBlockSize==1;
  if(timeToReclaim)
  {
    ul newSize=e(stack).ul;
    z result;
    result.y=(y)malloc(newSize*sizeof(z));
    result.y[0].ul=stack.y[0].ul-1;
    ++stack.y;
    ul i;
    for(i=1;i<newSize;++i)
    {
      result.y[i]=stack.y[i];
    }
    --stack.y;
    f(stack);
    return result;
  }
  else
  {
    stack.y[1].ul=stack.y[0].ul-1;
    ++stack.y;
    return stack;
  }
}

z top(z stack)
{
  return stack.y[1];
}

z u(z one,z two)
{
  ul size=e(one).ul+e(two).ul+2;
  z result;
  result.y=(y)malloc((size+1)*sizeof(z));
  result.y[0].ul=size;
  ++result.y;
  ul i;
  for(i=0;i<=e(one).ul;++i)
  {
    result.y[i]=one.y[i];
  }
  result.y+=i;
  for(i=0;i<=e(two).ul;++i)
  {
    result.y[i]=two.y[i];
  }
  result.y-=e(one).ul+2;
  f(one);
  f(two);
  return result;
}

z identity(z one)
{
  return one;
}

int main()
{
  z v;
  z fun;
  z stack;

  v.uc='Z';
  fun.f1=&identity;
  v=fun.f1(v);
  printf("%c\n",v.uc);
  printf("%d\n",sizeof(z));
  printf("%d\n",sizeof(char));

  stack=n();
  stack=push(v,stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ul);
  v.uc='E';
  stack=push(v,stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ul);
  v.uc='D';
  stack=push(v,stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ul);
  v.uc='E';
  stack=push(v,stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ul);
  v.uc='Z';
  stack=push(v,stack);
  stack=c(stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ul);
  stack=pop(stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ul);
  stack=pop(stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ul);
  stack=pop(stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ul);
  stack=pop(stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ul);
  stack=pop(stack);
  printf("%llu\n",e(stack).ul);
  f(stack);  

  v.uc='Z';
  stack=n();
  stack=push(v,stack);
  stack=push(v,stack);
  stack=push(v,stack);
  
  f(stack);
  return 0;
}
