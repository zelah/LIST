#include<stdio.h>
#include<stdlib.h>

#define DEFINE_ZED_TYPE(type_) typedef type_ ZED##type_;typedef type_ * type_##P;typedef type_##P ZED##type_##P;static type_##P type_##ArrayNew(ull size){return (type_##P)malloc(size*sizeof(type_));}

typedef unsigned long long ull;
typedef unsigned char u;
DEFINE_ZED_TYPE(u)
typedef uP p;
typedef union{ull length;p pointer;}g;
DEFINE_ZED_TYPE(g)
typedef gP pp;
pp gl;

ull ullMax(ull one,ull two)
{
  if(one>two)
  {
    return one;
  }
  else
  {
    return two;
  }
}

ull extent1(ull character)
{
  return character-'0';
}

ull extent2(ull index,p list,ull value)
{
  if(list[index]==')')
  {
    return value;
  }
  else
  {
    return extent2(index+1,list,extent1(list[index])+value*10);
  }
}

ull extent(p list)
{
  return extent2(1,list,0);
}

ull selfExtent1(ull extent,ull length,ull magnitude)
{
  if(extent<magnitude)
  {
    return length;
  }
  else
  {
    return selfExtent1(extent,length+1,magnitude*10);
  }
}

ull selfExtent(ull extent)
{
  return selfExtent1(extent,3,10);
}

void display1(ull index,ull end,p list)
{
  if(index<end)
  {
    printf("%c",list[index]);
    display1(index+1,end,list);
  }
}

void display(p list)
{
  ull ext=extent(list);
  ull start=selfExtent(ext);
  ull end=start+ext;
  display1(start,end,list);
}

void line()
{
  printf("\n");
}

void space()
{
  printf(" ");
}

void displayLine(p list)
{
  display(list);
  line();
}

void displaySpace(p list)
{
  display(list);
  space();
}

ull stringLength1(char* string,ull index)
{
  if(string[index]==0)
  {
    return index;
  }
  else
  {
    return stringLength1(string,index+1);
  }
}

ull stringLength(char* string)
{
  return stringLength1(string,0);
}

u ullAssertLargePowerOfTwo1(ull number,ull t)
{
  if(t>number)
  {
    return 0;
  }
  else if(t==number)
  {
    return 1;
  }
  else
  {
    return ullAssertLargePowerOfTwo1(number,t*2);
  }
}

u ullAssertLargePowerOfTwo(ull number)
{
  return ullAssertLargePowerOfTwo1(number,1024);
}

pp glNew()
{
  pp garbage=gArrayNew(1024);
  garbage[1023].length=0;
  return garbage+1023;
}

pp glExtend(p garbage,pp gl)
{
  ull i;
  ull count=0;
  ull length=gl[0].length;
  for(i=1;i<length+1;++i)
  {
    if(gl[i].pointer==garbage)
    {
      ++count;
    }
  }
  if(count==0)
  {
    if(ullAssertLargePowerOfTwo(gl[0].length+1))
    {
      pp temp=gArrayNew(2*(length+1));
      temp=temp+length;
      temp[0].length=length+1;
      temp[1].pointer=garbage;
      ull right=length+1;
      for(i=2;i<right;++i)
      {
        temp[i].pointer=gl[i-1].pointer;
      }
      free(gl);
      return temp;
      }
      else
      {
        gl=gl-1;
        gl[0].length=length+1;
        gl[1].pointer=garbage;
        return gl;
      }
  }
  else
  {
    return gl;
  }
}

pp co1(pp gl,ull t)
{
  if(t-1<gl[0].length)
  {
    return co1(gl,t*2);
  }
  else
  {
    return gl-(t-1-gl[0].length);
  }
}

void co()
{
  ull right=gl[0].length;
  ull i;
  for(i=right;i>0;--i)
  {
    free(gl[i].pointer);
  }
  gl=co1(gl,1024);
  free(gl);
  gl=glNew();
}

p n1(char* string,p list,ull left,ull right,ull extent)
{
  list[0]='(';
  list[left-1]=')';
  ull i;
  for(i=left-2;i>0;--i)
  {
    list[i]=(u)extent%10+'0';
    extent/=10;
  }
  for(i=left;i<right;++i)
  {
    list[i]=(u)string[i-left];
  }
  return list;
}

p n(char* string)
{
  ull x=stringLength(string);
  ull s=selfExtent(x);
  ull t=s+x;
  return n1(string,uArrayNew(t),s,t,x);
}

void cc(p list)
{
  gl=glExtend(list,gl);
}

p c1(p list,p temp,ull length)
{
  if(length==0)
  {
    return temp;
  }
  else
  {
    temp[length-1]=list[length-1];
    return c1(list,temp,length-1);
  }
}

p c(p list)
{
  ull x=extent(list);
  ull s=selfExtent(x);
  ull length=s+x;
  p temp=uArrayNew(length);
  return c1(list,temp,length);
}

p app1(p one,p two,p three,ull s1,ull s2,ull left,ull middle,ull right,ull extent)
{
  co();
  ull i;
  three[0]='(';three[left-1]=')';
  for(i=left-2;i>0;--i)
  {
    three[i]=extent%10+'0';
    extent=extent/10;
  }
  for(i=left;i<middle;++i)
  {
    three[i]=one[i-left+s1];
  }
  for(i=middle;i<right;++i)
  {
    three[i]=two[i-middle+s2];
  }
  p three1=c(three);
  cc(one);
  cc(two);
  cc(three);
  return three1;
}

p app(p one,p two)
{
  co();
  ull x1=extent(one);
  ull x2=extent(two);
  ull x3=x1+x2;
  ull s1=selfExtent(x1);
  ull s2=selfExtent(x2);
  ull s3=selfExtent(x3);
  ull t=s3+x3;
  p one1=c(one);
  p two1=c(two);
  cc(one);
  cc(two);
  return app1(one1,two1,uArrayNew(t),s1,s2,s3,s3+x1,t,x3);
}

p ad1(p one,p two,ull s1,ull t1,ull s2,ull t2,ull carry)
{
  co();
  if(t1<s1)
  {
    if(carry)
    {
      p one1=c(one);
      cc(one);
      cc(two);
      return app(n("1"),one1);
    }
    else
    {
      p one1=c(one);
      cc(one);
      cc(two);
      return one1;
    }
  }
  else if(t2<s2)
  {
    ull temp=one[t1];
    one[t1]=(temp-'0'+carry)%10+'0';
    if((temp-'0'+carry)>9)
    {
      p one1=c(one);
      p two1=c(two);
      cc(one);
      cc(two);
      return ad1(one1,two1,s1,t1-1,s2,t2,1);
    }
    else
    {
      p one1=c(one);
      cc(one);
      cc(two);
      return one1;
    }
  }
  else
  {
    ull temp=one[t1];
    one[t1]=(temp-'0'+two[t2]-'0'+carry)%10+'0';
    p one1=c(one);
    p two1=c(two);
    cc(one);
    cc(two);
    return ad1(one1,two1,s1,t1-1,s2,t2-1,(temp-'0'+two[t2]-'0'+carry)/10);
  }
}

p ad(p one,p two)
{
  co();
  ull x1=extent(one);
  ull x2=extent(two);
  ull x3=ullMax(x1,x2);
  ull s1=selfExtent(x1);
  ull s2=selfExtent(x2);
  ull t1=s1+x1;
  ull t2=s2+x2;
  if(x3==x1)
  {
    p one1=c(one);
    p two1=c(two);
    cc(one);
    cc(two);
    return ad1(one1,two1,s1,t1-1,s2,t2-1,0);
  }
  else
  {
    p one1=c(one);
    p two1=c(two);
    cc(one);
    cc(two);
    return ad1(two1,one1,s2,t2-1,s1,t1-1,0);
  }
}

p su1(p one,p two,ull s1,ull t1,ull s2,ull t2,ull borrow)
{
  co();
  if(t1<s1)
  {
    p one1=c(one);
    cc(one);
    cc(two);
    return one1;
  }
  else if(t2<s2)
  {
    if(borrow)
    {
      if(one[t1]=='0')
      {
        one[t1]='9';
        p one1=c(one);
        p two1=c(two);
        cc(one);
        cc(two);
        return su1(one1,two1,s1,t1-1,s2,t2,1);
      }
      else
      {
        --(one[t1]);
        p one1=c(one);
        p two1=c(two);
        cc(one);
        cc(two);
        return su1(one1,two1,s1,t1-1,s2,t2,0);
      }
    }
    else
    {
      p one1=c(one);
      cc(one);
      cc(two);
      return one1;
    }
  }
  else
  {
    u futureBorrow=((10+one[t1]-two[t2]-borrow)<10);
    if(futureBorrow)
    {
      one[t1]=10+one[t1]-two[t2]-borrow+'0';
      p one1=c(one);
      p two1=c(two);
      cc(one);
      cc(two);
      return su1(one1,two1,s1,t1-1,s2,t2-1,1);
    }
    else
    {
      one[t1]=one[t1]-two[t2]-borrow+'0';
      p one1=c(one);
      p two1=c(two);
      cc(one);
      cc(two);
      return su1(one1,two1,s1,t1-1,s2,t2-1,0);
    }
  }
}

void su2(p list,ull ext,ull index)
{
  ull i;
  for(i=index;i>0;--i)
  {
    list[i]=ext%10+'0';ext/=10;
  }
}

p su3(p list)
{
  co();
  ull x=extent(list);
  ull s=selfExtent(x);
  if(list[s]=='0')
  {
    ull t=s+x;
    while(s<t-1&&list[s]=='0')
    {
      ++s;
    }
    ull ext=t-s;
    ull sel=selfExtent(ext);
    p temp=uArrayNew(sel+ext);
    temp[0]='(';
    temp[sel-1]=')';
    su2(temp,ext,sel-2);
    ull i;
    for(i=sel;i<t;++i)
    {
      temp[i]=list[s];
      ++s;
    }
    cc(list);
    return temp;
  }
  else
  {
    p list1=c(list);
    cc(list);
    return list1;
  }
}

p su(p one,p two)
{
  co();
  ull x1=extent(one);
  ull x2=extent(two);
  ull s1=selfExtent(x1);
  ull s2=selfExtent(x2);
  ull t1=s1+x1;
  ull t2=s2+x2;
  p one1=su1(c(one),c(two),s1,t1-1,s2,t2-1,0);
  cc(one);
  cc(two);
  return su3(one1);
}

p al(p one,p two)
{
  co();
  ull x1=extent(one);
  ull x2=extent(two);
  ull s1=selfExtent(x1);
  ull s2=selfExtent(x2);
  ull t1=s1+x1;
  ull t2=s2+x2;
  while(one[s1]==two[s2]&&s1<t1&&s2<t2)
  {
    ++s1;
    ++s2;
  }
  if(s1<t1&&s2<t2)
  {
    p one1=c(one);
    cc(one);
    cc(two);
    return (one[s1]<two[s2])?one1:n("#fals");
  }
  else
  {
    p one1=c(one);
    cc(one);
    cc(two);
    return (x1<x2)?one1:n("#fals");
  }
}

p lt(p one,p two)
{
  co();
  ull x1=extent(one);
  ull x2=extent(two);
  if(x1==x2)
  {
    ull s=selfExtent(x1);
    ull t=s+x1;
    while(one[s]==two[s]&&s<t)
    {
      ++s;
    }
    if(s<t)
    {
      p one1=c(one);
      cc(one);
      cc(two);
      return (one[s]<two[s])?one1:n("#fals");
    }
    else
    {
      cc(one);
      cc(two);
      return n("#fals");
    }
  }
  else
  {
    p one1=c(one);
    cc(one);
    cc(two);
    return (x1<x2)?one1:n("#fals");
  }
}

p eq(p one,p two)
{
  co();
  ull x1=extent(one);
  ull x2=extent(two);
  if(x1==x2)
  {
    ull s=selfExtent(x1);
    ull t=s+x1;
    while(s<t&&one[s]==two[s])
    {
      ++s;
    }
    if(s==t)
    {
      p one1=c(one);
      cc(one);
      cc(two);
      return one1;
    }
  }
  cc(one);
  cc(two);
  return n("#fals");
}

p gt(p one,p two)
{
  co();
  ull x1=extent(one);
  ull x2=extent(two);
  if(x1==x2)
  {
    ull s=selfExtent(x1);
    ull t=s+x1;
    while(one[s]==two[s]&&s<t)
    {
      ++s;
    }
    if(s<t)
    {
      p one1=c(one);
      cc(one);
      cc(two);
      return (one[s]>two[s])?one1:n("#fals");
    }
    else
    {
      cc(one);
      cc(two);
      return n("#fals");
    }
  }
  else
  {
    p one1=c(one);
    cc(one);
    cc(two);
    return (x1>x2)?one1:n("#fals");
  }
}

p nu(p list)
{
  co();
  p list1=c(list);
  cc(list);
  return (extent(list)==0)?list1:n("#fals");
}

u as(p list)
{
  co();
  ull x=extent(list);
  cc(list);
  return !(x==5&&list[3]=='#'&&list[4]=='f'&&list[5]=='a'&&list[6]=='l'&&list[7]=='s');
}

u asv(p list)
{
  co();
  ull x=extent(list);
  cc(list);
  return !(x==5&&list[3]=='#'&&list[4]=='f'&&list[5]=='a'&&list[6]=='l'&&list[7]=='s')&&!(x==6&&list[3]=='#'&&list[4]=='f'&&list[5]=='a'&&list[6]=='l'&&list[7]=='s'&&list[8]=='e');
}

u tr(p list)
{
  co();
  u result=as(c(list))+asv(c(list));
  cc(list);
  return result;
}

p no(p one)
{
  co();
  if(as(c(one)))
  {
    cc(one);
    return n("#fals");
  }
  else
  {
    cc(one);
    return n("#true");
  }
}

p a(p one,p two)
{
  co();
  if(as(c(one)))
  {
    p two1=c(two);
    cc(one);
    cc(two);
    return two1;
  }
  else
  {
    p one1=c(one);
    cc(one);
    cc(two);
    return one1;
  }
}

p o(p one,p two)
{
  co();
  if(as(c(one)))
  {
    p one1=c(one);
    cc(one);
    cc(two);
    return one1;
  }
  else
  {
    p two1=c(two);
    cc(one);
    cc(two);
    return two1;
  }
}

p x(p one,p two)
{
  co();
  if(as(c(one)))
  {
    p two1=c(two);
    cc(one);
    cc(two);
    return no(two1);
  }
  else
  {
    p two1=c(two);
    cc(one);
    cc(two);
    return two1;
  }
}

p push1(p one,p two,p three,ull left,ull middle,ull right,ull total)
{
  co();
  three[0]='(';three[left-1]=')';
  ull i;
  for(i=left-2;i>0;--i)
  {
    three[i]=total%10+'0';
    total/=10;
  }
  for(i=left;i<middle;++i)
  {
    three[i]=one[i-left];
  }
  for(i=middle;i<right;++i)
  {
    three[i]=two[i-middle];
  }
  p three1=c(three);
  cc(one);
  cc(two);
  cc(three);
  return three1;
}

p push(p one,p two)
{
  co();
  ull x1=extent(one);
  ull x2=extent(two);
  ull s1=selfExtent(x1);
  ull s2=selfExtent(x2);
  ull t1=s1+x1;
  ull x3=t1+s2+x2;
  ull s3=selfExtent(x3);
  ull x4=s3+x3;
  p one1=c(one);
  p two1=c(two);
  cc(one);
  cc(two);
  return push1(one1,two1,uArrayNew(x4),s3,s3+t1,x4,x3);
}

p top(p list)
{
  co();
  ull x=extent(list);
  ull s=selfExtent(x);
  p list1=c(list+s);
  cc(list);
  return list1;
}

p pop(p list)
{
  co();
  ull x=extent(list);
  ull s=selfExtent(x);
  ull tx=extent(list+s);
  ull ts=selfExtent(tx);
  p list1=c(list+s+ts+tx);
  cc(list);
  return list1;
}

p rv1(p list,p collect)
{
  co();
  if(as(nu(c(list))))
  {
    p collect1=c(collect);
    cc(list);
    cc(collect);
    return collect1;
  }
  else
  {
    p list1=c(list);
    p list2=c(list);
    p collect1=c(collect);
    list1=pop(list1);
    collect1=push(top(list2),collect1);
    cc(list);
    cc(collect);
    return rv1(list1,collect1);
  }
}

p rv(p list)
{
  co();
  p list1=c(list);
  cc(list);
  return rv1(list1,n(""));
}

p ap1(p one,p two,p collect)
{
  co();
  if(as(nu(c(one))))
  {
    if(as(nu(c(two))))
    {
      p collect1=c(collect);
      cc(one);
      cc(two);
      cc(collect);
      return rv(collect1);
    }
    else
    {
      p one1=c(one);
      p two1=pop(c(two));
      p collect1=push(top(c(two)),c(collect));
      cc(one);
      cc(two);
      cc(collect);
      return ap1(one1,two1,collect1);
    }
  }
  else
  {
    p one1=pop(c(one));
    p two1=c(two);
    p collect1=push(top(c(one)),c(collect));
    cc(one);
    cc(two);
    cc(collect);
    return ap1(one1,two1,collect1);
  }
}

p ap(p one,p two)
{
  co();
  p one1=c(one);
  p two1=c(two);
  cc(one);
  cc(two);
  return ap1(one1,two1,n(""));
}

p mp1(p (*f)(p),p list,p collect)
{
  co();
  if(as(nu(c(list))))
  {
    p collect1=c(collect);
    cc(list);
    cc(collect);
    return rv(collect1);
  }
  else
  {
    p list1=pop(c(list));
    p collect1=push(f(top(c(list))),c(collect));
    cc(list);
    cc(collect);
    return mp1(f,list1,collect1);
  }
}

p mp(p (*f)(p),p list)
{
  co();
  p list1=c(list);
  cc(list);
  return mp1(f,list1,n(""));
}

p fi1(p (*f)(p),p list,p collect)
{
  co();
  if(as(nu(c(list))))
  {
    p collect1=c(collect);
    cc(list);
    cc(collect);
    return rv(collect1);
  }
  else
  {
    if(as(f(top(c(list)))))
    {
      p list1=pop(c(list));
      p collect1=push(top(c(list)),c(collect));
      cc(list);
      cc(collect);
      return fi1(f,list1,collect1);
    }
    else
    {
      p list1=pop(c(list));
      p collect1=c(collect);
      cc(list);
      cc(collect);
      return fi1(f,list1,collect1);
    }
  }
}

p fi(p (*f)(p),p list)
{
  co();
  p list1=c(list);
  cc(list);
  return fi1(f,list1,n(""));
}

p rd1(p (*f)(p,p),p result,p list)
{
  co();
  if(as(nu(c(list))))
  {
    p result1=c(result);
    cc(result);
    cc(list);
    return result1;
  }
  else
  {
    p result1=f(top(c(list)),c(result));
    p list1=pop(c(list));
    cc(result);
    cc(list);
    return rd1(f,result1,list1);
  }
}

p rd(p (*f)(p,p),p fin,p list)
{
  co();
  p fin1=c(fin);
  p list1=rv(c(list));
  cc(fin);
  cc(list);
  return rd1(f,fin1,list1);
}

p mx(p one,p two)
{
  co();
  p one1=gt(c(one),c(two));
  p two1=c(two);
  cc(one);
  cc(two);
  return o(one1,two1);
}

p mn(p one,p two)
{
  co();
  p one1=lt(c(one),c(two));
  p two1=c(two);
  cc(one);
  cc(two);
  return o(one1,two1);
}

int main()
{
gl=glNew();
printf("%d%d%d\n",tr(n("#fals")),tr(n("#false")),tr(n("123")));
p list2=push(n("#fals"),push(n("first"),push(n("second"),n(""))));
displayLine(c(list2));
displayLine(rv(c(list2)));
displayLine(ap(c(list2),c(list2)));
displayLine(mp(&no,c(list2)));
displayLine(fi(&no,c(list2)));
p list3=push(n("123"),push(n("9999"),push(n("45"),n(""))));
displayLine(rd(&mn,top(c(list3)),c(list3)));
line();
p num=n("999876543217654321600543215432143210321211112304567892345678093456789045678956789678978098999999");
displayLine(lt(c(num),c(num)));
printf("%d\n",as(lt(c(num),c(num))));
displayLine(gt(c(num),c(num)));
printf("%d\n",as(gt(c(num),c(num))));
displayLine(eq(c(num),c(num)));
printf("%d\n",as(eq(c(num),c(num))));
displayLine(al(n("123"),n("999")));
printf("%d\n",as(al(n("123"),n("999"))));
displayLine(al(n("#false"),n("#true")));
printf("%d\n",as(al(n("#false"),n("#true"))));
line();
displayLine(app(c(num),c(num)));
line();
p list=push(c(num),n(""));
displayLine(c(list));
line();
pop(c(list));
displayLine(top(c(list)));
line();
displayLine(ad(c(num),c(num)));
line();
displayLine(su(c(num),su(c(num),n("999999"))));
line();
displayLine(a(n("#fals"),n("#false")));
line();
displayLine(a(n("#fals"),c(num)));
line();
displayLine(a(n("#true"),n("#false")));
line();
displayLine(a(n("#true"),c(num)));
line();
displayLine(o(n("#fals"),n("#false")));
line();
displayLine(o(n("#fals"),c(num)));
line();
displayLine(o(n("#true"),n("#false")));
line();
displayLine(o(n("#true"),c(num)));
line();
displayLine(x(n("#fals"),n("#false")));
line();
displayLine(x(n("#fals"),c(num)));
line();
displayLine(x(n("#true"),n("#false")));
line();
displayLine(x(n("#true"),c(num)));
line();
displayLine(a(eq(push(n("one"),n("two")),push(n("one"),n("two"))),n("success")));
line();

printf("\n%llu\n",gl[0].length);
co();
printf("\n%llu\n",gl[0].length);
return 0;
}
