#include<stdio.h>
#include<stdlib.h>

typedef union z z;
union z
{
  char ch;
  unsigned char uc;
  signed char sc;
  short sh;
  unsigned short us;
  signed short ss;
  int in;
  unsigned int ui;
  signed int si;
  long lo;
  unsigned long lu;
  signed long ls;
  long long ll;
  unsigned long long ul;
  signed long long sl;
  float fl;
  double db;
  long double ld;
  z *y;
  z (*f0)();
  z (*f1)(z);
  z (*f2)(z,z);
  z (*f3)(z,z,z);
  z (*f4)(z,z,z,z);
  z (*f5)(z,z,z,z,z);
  z (*f6)(z,z,z,z,z,z);
  z (*f7)(z,z,z,z,z,z,z);
  z (*f8)(z,z,z,z,z,z,z,z);
  z (*f9)(z,z,z,z,z,z,z,z,z);
  z (*f10)(z,z,z,z,z,z,z,z,z,z);
  z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
  z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
};
typedef char ch;
typedef unsigned char uc;
typedef signed char sc;
typedef short sh;
typedef unsigned short us;
typedef signed short ss;
typedef int in;
typedef unsigned int ui;
typedef signed int si;
typedef long lo;
typedef unsigned long lu;
typedef signed long ls;
typedef long long ll;
typedef unsigned long long ul;
typedef signed long long sl;
typedef float fl;
typedef double db;
typedef long double ld;
typedef z *y;
typedef z (*f0)();
typedef z (*f1)(z);
typedef z (*f2)(z,z);
typedef z (*f3)(z,z,z);
typedef z (*f4)(z,z,z,z);
typedef z (*f5)(z,z,z,z,z);
typedef z (*f6)(z,z,z,z,z,z);
typedef z (*f7)(z,z,z,z,z,z,z);
typedef z (*f8)(z,z,z,z,z,z,z,z);
typedef z (*f9)(z,z,z,z,z,z,z,z,z);
typedef z (*f10)(z,z,z,z,z,z,z,z,z,z);
typedef z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
ul const block=2;

z n()
{
  z result;
  result.y=(y)malloc((block+1)*sizeof(z));
  result.y+=block;
  result.y[0].ul=0;
  return result;
}

ul e(z object)
{
  return object.y[0].ul;
}

void display(z object)
{
  printf("(%llu)",e(object));
  ul i;
  for(i=1;i<=e(object);++i)
  {
    printf("%c",object.y[i].uc);
  }
}

void displayLine(z object)
{
  display(object);
  printf("\n");
}

void displaySpace(z object)
{
  display(object);
  printf(" ");
}

ul size(ul extent)
{
  return (extent==0)?block:((extent-1)/block+1)*block;
}

z c(z object)
{
  ul sz=size(e(object));
  z result;
  result.y=(y)malloc((sz+1)*sizeof(z));
  result.y+=sz-e(object);
  ul i;
  for(i=0;i<=e(object);++i)
  {
    result.y[i]=object.y[i];
  }
  return result;
}

void f(z stack)
{
  ul sz=size(e(stack));
  stack.y-=sz-e(stack);
  free(stack.y);
}

z ps(z object,z stack)
{
  ul sz=size(e(stack)+1);
  if(e(stack)+block==sz)
  {
    z result;
    result.y=(y)malloc((sz+1)*sizeof(z));
    result.y+=sz-e(stack)-1;
    result.y[0].ul=e(stack)+1;
    result.y[1]=object;
    ++result.y;
    ul i;
    for(i=1;i<=e(stack);++i)
    {
     result.y[i]=stack.y[i];
    }
    --result.y;
    f(stack);
    return result;
  }
  else
  {
    --stack.y;
    stack.y[0].ul=stack.y[1].ul+1;
    stack.y[1]=object;
    return stack;
  }
}

z pp(z stack)
{
  ul sz=size(e(stack)-1);
  if(sz<e(stack))
  {
    z result;
    result.y=(y)malloc((sz+1)*sizeof(z));
    result.y[0].ul=e(stack)-1;
    ++stack.y;
    ul i;
    for(i=1;i<=e(result);++i)
    {
      result.y[i]=stack.y[i];
    }
    --stack.y;
    f(stack);
    return result;
  }
  else
  {
    stack.y[1].ul=stack.y[0].ul-1;
    ++stack.y;
    return stack;
  }
}

z tp(z stack)
{
  z result=stack.y[1];
  f(stack);
  return result;
}

z rv(z stack)
{
  ul i;
  z temp;
  ul r=e(stack);
  ul m=r/2;
  for(i=1;i<=m;++i)
  {
    temp=stack.y[i];
    stack.y[i]=stack.y[r];
    stack.y[r]=temp;
    --r;
  }
  return stack;
}

z mp(z fun,z stack)
{
  ul i;
  for(i=1;i<=e(stack);++i)
  {
    stack.y[i]=fun.f1(stack.y[i]);
  }
  return stack;
}

z kp1(z fun,z stack,z result)
{
  if(e(stack))
  {
    if(fun.f1(tp(c(stack))).uc)
    {
      result=ps(tp(c(stack)),result);
    }
    return kp1(fun,pp(stack),result);
  }
  else
  {
    f(stack);
    return result;
  }
}

z kp(z fun,z stack)
{
  return kp1(fun,rv(stack),n());
}

z rd1(z fun,z stack)
{
  if(e(stack)==1)
  {
    return tp(stack);
  }
  else
  {
    z combined;
    combined=fun.f2(tp(pp(c(stack))),tp(c(stack)));
    stack=pp(pp(stack));
    return rd1(fun,ps(combined,stack));
  }
}

z rd(z fin,z fun,z stack)
{
  return rd1(fun,ps(fin,rv(stack)));
}

z mf(z fun,z stack)
{
  ul i;
  z temp;
  for(i=1;i<=e(stack);++i)
  {
    temp=fun.f1(c(stack.y[i]));
    f(stack.y[i]);
    stack.y[i]=temp;
  }
  return stack;
}

z kf1(z fun,z stack,z result)
{
  if(e(stack))
  {
    if(fun.f1(tp(c(stack))).uc)
    {
      result=ps(tp(c(stack)),result);
      return kf1(fun,pp(stack),result);
    }
    else
    {
      f(stack.y[1]);
      return kf1(fun,pp(stack),result);
    }
  }
  else
  {
    f(stack);
    return result;
  }
}

z kf(z fun,z stack)
{
  return kf1(fun,rv(stack),n());
}

z rf1(z fun,z stack)
{
  if(e(stack)==1)
  {
    return tp(stack);
  }
  else
  {
    z combined;
    combined=fun.f2(c(stack.y[2]),c(stack.y[1]));
    f(stack.y[1]);
    f(stack.y[2]);
    stack=pp(pp(stack));
    return rf1(fun,ps(combined,stack));
  }
}

z rf(z fin,z fun,z stack)
{
  return rf1(fun,ps(fin,rv(stack)));
}

z u(z stack1,z stack2)
{
  ul sz=size(e(stack1)+e(stack2)+2);
  z result;
  result.y=(y)malloc((sz+1)*sizeof(z));
  result.y+=sz-e(stack1)-e(stack2)-2;
  result.y[0].ul=e(stack1)+e(stack2)+2;
  ++result.y;
  ul i;
  for(i=0;i<=e(stack1);++i)
  {
    result.y[i]=stack1.y[i];
  }
  result.y+=e(stack1)+1;
  for(i=0;i<=e(stack2);++i)
  {
    result.y[i]=stack2.y[i];
  }
  result.y-=e(stack1)+1;
  --result.y;
  f(stack1);
  f(stack2);
  return result;
}

z t(z stack)
{
  z result;
  ++stack.y;
  result=c(stack);
  --stack.y;
  f(stack);
  return result;
}

z identity(z object)
{
  return object;
}

z inc(z character)
{
  character.uc=character.uc+1;
  return character;
}

z notExclaim(z character)
{
  character.uc=character.uc!='!';
  return character;
}

z notEmpty(z stack)
{
  stack.uc=e(stack)!=0;
  return stack;
}

int main()
{
  z v;
  z fun;
  z fun2;
  z stack;
  z stack2;
  stack=n();
  displayLine(stack);
  v.uc='!';
  stack=ps(v,stack);
  displayLine(stack);
  v.uc='Z';
  stack=ps(v,stack);
  displayLine(stack);
  v.uc='E';
  stack=ps(v,stack);
  displayLine(stack);
  v.uc='D';
  stack=ps(v,stack);
  displayLine(stack);
  v.uc='!';
  stack=ps(v,stack);
  displayLine(stack);
  fun.f1=&notExclaim;
  stack=kp(fun,stack);
  stack2=c(stack);
  displayLine(stack);
  fun.f1=&identity;
  stack=mp(fun,stack);
  displayLine(stack);
  stack=rv(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  stack=pp(stack);
  displayLine(stack);
  fun2.f2=&ps;
  stack2=rd(n(),fun2,stack2);
  displayLine(stack2);
  stack=ps(c(stack2),stack);
  stack=ps(c(stack2),stack);
  stack=ps(n(),stack);
  stack=ps(c(stack2),stack);
  stack=ps(n(),stack);
  fun.f1=&notEmpty;
  stack=kf(fun,stack);
  fun.f1=&identity;
  stack=mf(fun,stack);
  fun2.f2=&u;
  stack=rf(n(),fun2,stack);
  displayLine(t(c(stack)));
  return 0;
}
