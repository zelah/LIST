#include<stdio.h>
#include<stdlib.h>

typedef union z z;
union z
{
  char ch;
  unsigned char uc;
  signed char sc;
  short sh;
  unsigned short us;
  signed short ss;
  int in;
  unsigned int ui;
  signed int si;
  long lo;
  unsigned long ul;
  signed long sl;
  long long ll;
  unsigned long long ull;
  signed long long sll;
  float fl;
  double db;
  long double ld;
  z *p;
  z (*f0)();
  z (*f1)(z);
  z (*f2)(z,z);
  z (*f3)(z,z,z);
  z (*f4)(z,z,z,z);
  z (*f5)(z,z,z,z,z);
  z (*f6)(z,z,z,z,z,z);
  z (*f7)(z,z,z,z,z,z,z);
  z (*f8)(z,z,z,z,z,z,z,z);
  z (*f9)(z,z,z,z,z,z,z,z,z);
  z (*f10)(z,z,z,z,z,z,z,z,z,z);
  z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
  z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
};
typedef char ch;
typedef unsigned char uc;
typedef signed char sc;
typedef short sh;
typedef unsigned short us;
typedef signed short ss;
typedef int in;
typedef unsigned int ui;
typedef signed int si;
typedef long lo;
typedef unsigned long ul;
typedef signed long sl;
typedef long long ll;
typedef unsigned long long ull;
typedef signed long long sll;
typedef float fl;
typedef double db;
typedef long double ld;
typedef z *p;
typedef z (*f0)();
typedef z (*f1)(z);
typedef z (*f2)(z,z);
typedef z (*f3)(z,z,z);
typedef z (*f4)(z,z,z,z);
typedef z (*f5)(z,z,z,z,z);
typedef z (*f6)(z,z,z,z,z,z);
typedef z (*f7)(z,z,z,z,z,z,z);
typedef z (*f8)(z,z,z,z,z,z,z,z);
typedef z (*f9)(z,z,z,z,z,z,z,z,z);
typedef z (*f10)(z,z,z,z,z,z,z,z,z,z);
typedef z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
const ull allocationBlockSize=4;

z n()
{
  z result;
  result.p=(p)malloc((allocationBlockSize+1)*sizeof(z));
  result.p=result.p+allocationBlockSize;
  result.p[0].ull=0;
  return result;
}

z e(z one)
{
  return one.p[0];
}

void f(z one)
{
  ull size=allocationBlockSize*((e(one).ull-1)/allocationBlockSize+1);
  one.p-=size-e(one).ull;
  free(one.p);
}

z push(z one,z stack)
{
  uc timeToAllocate=e(stack).ull>0&&e(stack).ull%allocationBlockSize==0;
  if(timeToAllocate)
  {
    ull newSize=e(stack).ull+allocationBlockSize+1;
    z result;
    result.p=(p)malloc(newSize*sizeof(z));
    result.p+=allocationBlockSize-1;
    result.p[0].ull=stack.p[0].ull+1;
    result.p[1]=one;
    ++result.p;
    ull i;
    ull right=allocationBlockSize+1;
    for(i=1;i<right;++i)
    {
      result.p[i]=stack.p[i];
    }
    --result.p;
    f(stack);
    return result;
  }
  else
  {
    --stack.p;
    stack.p[0].ull=stack.p[1].ull+1;
    stack.p[1]=one;
    return stack;
  }
}

z pop(z stack)
{
  uc timeToReclaim=e(stack).ull%allocationBlockSize==1;
  if(timeToReclaim)
  {
    ull newSize=e(stack).ull;
    z result;
    result.p=(p)malloc(newSize*sizeof(z));
    result.p[0].ull=stack.p[0].ull-1;
    ++stack.p;
    ull i;
    for(i=1;i<newSize;++i)
    {
      result.p[i]=stack.p[i];
    }
    --stack.p;
    f(stack);
    return result;
  }
  else
  {
    stack.p[1].ull=stack.p[0].ull-1;
    stack.p+=1;
    return stack;
  }
}

z top(z stack)
{
  return stack.p[1];
}

z identity(z one)
{
  return one;
}

int main()
{
  z v;
  z fu;
  z stack;

  v.uc='Z';
  fu.f1=&identity;
  v=fu.f1(v);
  printf("%c\n",v.uc);
  printf("%d\n",sizeof(z));
  printf("%d\n",sizeof(char));

  stack=n();
  stack=push(v,stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ull);
  v.uc='E';
  stack=push(v,stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ull);
  v.uc='D';
  stack=push(v,stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ull);
  v.uc='E';
  stack=push(v,stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ull);
  v.uc='Z';
  stack=push(v,stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ull);
  stack=pop(stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ull);
  stack=pop(stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ull);
  stack=pop(stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ull);
  stack=pop(stack);
  printf("%c%llu\n",top(stack).uc,e(stack).ull);
  stack=pop(stack);
  printf("%llu\n",e(stack).ull);
  f(stack);  

  return 0;
}
