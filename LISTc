#include<stdio.h>
#include<stdlib.h>
#include<time.h>
 
#define PROFILE srand(time(NULL))
#define PRO(s) PRO1(s)
#define PRO0(s)
#define PRO1(s) {int r=rand()/(RAND_MAX/PRO3);if(r==0){printf(":%s ",s);fflush(stdout);}}
#define PRO2(s) {time_t t=time(NULL);int r=rand()/(RAND_MAX/PRO3);fflush(stdout);printf(":%s%3d ",s,(char)(t%100));fflush(stdout);printf("%c",1/r);}
#define PRO3 5555

typedef union z z;
union z
{
  char ch;
  unsigned char uc;
  signed char sc;
  short sh;
  unsigned short us;
  signed short ss;
  int in;
  unsigned int ui;
  signed int si;
  long lo;
  unsigned long lu;
  signed long ls;
  long long ll;
  unsigned long long ul;
  signed long long sl;
  float fl;
  double db;
  long double ld;
  z *y;
  z (*f0)();
  z (*f1)(z);
  z (*f2)(z,z);
  z (*f3)(z,z,z);
  z (*f4)(z,z,z,z);
  z (*f5)(z,z,z,z,z);
  z (*f6)(z,z,z,z,z,z);
  z (*f7)(z,z,z,z,z,z,z);
  z (*f8)(z,z,z,z,z,z,z,z);
  z (*f9)(z,z,z,z,z,z,z,z,z);
  z (*f10)(z,z,z,z,z,z,z,z,z,z);
  z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
  z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
  z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
};
typedef char ch;
typedef unsigned char uc;
typedef signed char sc;
typedef short sh;
typedef unsigned short us;
typedef signed short ss;
typedef int in;
typedef unsigned int ui;
typedef signed int si;
typedef long lo;
typedef unsigned long lu;
typedef signed long ls;
typedef long long ll;
typedef unsigned long long ul;
typedef signed long long sl;
typedef float fl;
typedef double db;
typedef long double ld;
typedef z *y;
typedef z (*f0)();
typedef z (*f1)(z);
typedef z (*f2)(z,z);
typedef z (*f3)(z,z,z);
typedef z (*f4)(z,z,z,z);
typedef z (*f5)(z,z,z,z,z);
typedef z (*f6)(z,z,z,z,z,z);
typedef z (*f7)(z,z,z,z,z,z,z);
typedef z (*f8)(z,z,z,z,z,z,z,z);
typedef z (*f9)(z,z,z,z,z,z,z,z,z);
typedef z (*f10)(z,z,z,z,z,z,z,z,z,z);
typedef z (*f11)(z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f12)(z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f13)(z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f14)(z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f15)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f16)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f17)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f18)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f19)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
typedef z (*f20)(z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z,z);
ul const block=1024;
 
void displayLine(z object);
 
z n()
{
  z result;
  result.y=(y)malloc((block+1)*sizeof(z));
  result.y+=block-2;
  result.y[0].ul=2;
  result.y[1].uc=1;
  result.y[2].ul=0;
  PRO("n");
  return result;
}
 
ul e(z object)
{
  PRO("e");
  return object.y[0].ul;
}
 
ul size(ul extent)
{
  PRO("size");
  return ((extent-1)/block+1)*block;
}
 
z c(z object)
{
  ul sz=size(e(object));
  z result;
  result.y=(y)malloc((sz+1)*sizeof(z));
  result.y+=sz-e(object);
  ul i;
  for(i=0;i<=e(object);++i)
  {
    result.y[i]=object.y[i];
  }
  PRO("c");
  return result;
}
 
void f(z stack)
{
  ul sz=size(e(stack));
  stack.y-=sz-e(stack);
  free(stack.y);
  PRO("f");
}
 
z ps(z object,z stack)
{
  ul sz=size(e(stack)+1);
  if(e(stack)+block==sz)
  {
    z result;
    result.y=(y)malloc((sz+1)*sizeof(z));
    result.y+=sz-e(stack)-1;
    result.y[0].ul=e(stack)+1;
    result.y[1].uc=1;
    result.y[2].ul=0;
    result.y[3]=object;
    ++result.y;
    ul i;
    for(i=3;i<=e(stack);++i)
    {
     result.y[i]=stack.y[i];
    }
    --result.y;
    f(stack);
    PRO("ps");
    return result;
  }
  else
  {
    --stack.y;
    stack.y[0].ul=stack.y[1].ul+1;
    stack.y[1].uc=1;
    stack.y[2].ul=0;
    stack.y[3]=object;
    PRO("ps");
    return stack;
  }
}
 
z pp(z stack)
{
  ul sz=size(e(stack)-1);
  if(sz<e(stack))
  {
    z result;
    result.y=(y)malloc((sz+1)*sizeof(z));
    result.y[0].ul=e(stack)-1;
    result.y[1].uc=1;
    result.y[2].ul=0;
    ul i;
    ++stack.y;
    for(i=3;i<=e(result);++i)
    {
      result.y[i]=stack.y[i];
    }
    --stack.y;
    f(stack);
    PRO("pp");
    return result;
  }
  else
  {
    stack.y[3].ul=0;
    stack.y[2].uc=1;
    stack.y[1].ul=e(stack)-1;
    ++stack.y;
    PRO("pp");
    return stack;
  }
}
 
z tp(z stack)
{
  z result=stack.y[3];
  f(stack);
  PRO("tp");
  return result;
}
 
z rv(z stack)
{
  stack.y[1].uc=1;
  ul i;
  z temp;
  ul r=e(stack);
  ul m=(r+2)/2;
  for(i=3;i<=m;++i)
  {
    temp=stack.y[i];
    stack.y[i]=stack.y[r];
    stack.y[r]=temp;
    --r;
  }
  PRO("rv");
  return stack;
}
 
z mp(z fun,z stack)
{
  stack.y[1].uc=1;
  ul i;
  for(i=3;i<=e(stack);++i)
  {
    stack.y[i]=fun.f1(stack.y[i]);
  }
  PRO("mp");
  return stack;
}
 
z kp1(z fun,z stack,z result)
{
  if(e(stack)==2)
  {
    f(stack);
    PRO("kp1");
    return result;
  }
  else
  {
    if(fun.f1(tp(c(stack))).uc)
    {
      result=ps(tp(c(stack)),result);
    }
    PRO("kp1");
    return kp1(fun,pp(stack),result);
  }
}
 
z kp(z fun,z stack)
{
  PRO("kp");
  return kp1(fun,rv(stack),n());
}
 
z rd1(z fun,z stack)
{
  if(e(stack)==3)
  {
    PRO("rd1");
    return tp(stack);
  }
  else
  {
    z combined;
    combined=fun.f2(tp(pp(c(stack))),tp(c(stack)));
    stack=pp(pp(stack));
    PRO("rd1");
    return rd1(fun,ps(combined,stack));
  }
}
 
z rd(z fin,z fun,z stack)
{
  PRO("rd");
  return rd1(fun,ps(fin,rv(stack)));
}
 
z u(z one,z two)
{
  ul ex=e(one)+e(two)+3;
  ul sz=size(ex);
  ul i;
  if(sz==size(e(two)))
  {
    two.y[1].uc=1;
    two.y-=e(one)+1;
    two.y[0]=one.y[0];
    two.y[1].uc=1;
    for(i=2;i<=e(one);++i)
    {
      two.y[i]=one.y[i];
    }
    two.y-=2;
    two.y[0].ul=ex;
    two.y[1].uc=1;
    f(one);
    PRO("u");
    return two;
  }
  else
  {
    z result;
    result.y=(y)malloc((sz+1)*sizeof(z));
    result.y+=sz-e(one)-e(two)-3;
    result.y[0].ul=ex;
    result.y[1].uc=1;
    result.y+=2;
    result.y[0]=one.y[0];
    result.y[1].uc=1;
    for(i=2;i<=e(one);++i)
    {
      result.y[i]=one.y[i];
    }
    result.y+=e(one)+1;
    result.y[0]=two.y[0];
    result.y[1].uc=1;
    for(i=2;i<=e(two);++i)
    {
      result.y[i]=two.y[i];
    }
    result.y-=e(one)+1;
    result.y-=2;
    f(one);
    f(two);
    PRO("u");
    return result;
  }
}
 
z t(z pair)
{
  z result;
  pair.y+=2;
  result=c(pair);
  pair.y-=2;
  f(pair);
  PRO("t");
  return result;
}
 
z p(z pair)
{
  z result;
  pair.y+=2;
  ul jump=e(pair)+1;
  pair.y+=jump;
  result=c(pair);
  pair.y-=jump;
  pair.y-=2;
  f(pair);
  PRO("p");
  return result;
}
 
z v1(z list,z result)
{
  if(e(list)==2)
  {
    f(list);
    PRO("v1");
    return result;
  }
  else
  {
    result=u(t(c(list)),result);
    PRO("v1");
    return v1(p(list),result);
  }
}
 
z v(z list)
{
  PRO("v");
  return v1(list,n());
}
 
z m1(z fun,z list,z result)
{
  if(e(list)==2)
  {
    f(list);
    PRO("m1");
    return result;
  }
  else
  {
    result=u(fun.f1(t(c(list))),result);
    PRO("m1");
    return m1(fun,p(list),result);
  }
}
 
z m(z fun,z list)
{
  PRO("m");
  return m1(fun,v(list),n());
}
 
z k1(z fun,z list,z result)
{
  if(e(list)==2)
  {
    f(list);
    PRO("k1");
    return result;
  }
  else
  {
    z top;
    top=t(c(list));
    if(fun.f1(c(top)).uc)
    {
      result=u(c(top),result);
    }
    f(top);
    PRO("k1");
    return k1(fun,p(list),result);
  }
}
 
z k(z fun,z list)
{
  PRO("k");
  return k1(fun,v(list),n());
}
 
z r1(z fun,z list)
{
  z rest;
  rest=p(c(list));
  if(e(rest)==2)
  {
    f(rest);
    PRO("r1");
    return t(list);
  }
  else
  {
    z temp;
    temp=fun.f2(t(rest),t(c(list)));
    PRO("r1");
    return r1(fun,u(temp,p(p(list))));
  }
}
 
z r(z fin,z fun,z list)
{
  PRO("r");
  return r1(fun,u(fin,v(list)));
}
 
uc as(z value)
{
  uc result=value.y[1].uc;
  f(value);
  PRO("as");
  return result;
}
 
z no(z value)
{
  if(value.y[1].uc)
  {
    value.y[1].uc=0;
  }
  else
  {
    value.y[1].uc=1;
  }
  PRO("no");
  return value;
}
 
z nu(z value)
{
  if(e(value)==2)
  {
    value.y[1].uc=1;
  }
  else
  {
    value.y[1].uc=0;
  }
  PRO("nu");
  return value;
}
 
z pr(z value)
{
  if(value.y[2].ul==0)
  {
    value.y[1].uc=0;
  }
  else
  {
    value.y[1].uc=1;
  }
  PRO("pr");
  return value;
}
 
z a(z one,z two)
{
  if(one.y[1].uc)
  {
    f(one);
    PRO("a");
    return two;
  }
  else
  {
    f(two);
    PRO("a");
    return one;
  }
}
 
z o(z one,z two)
{
  if(one.y[1].uc)
  {
    f(two);
    PRO("o");
    return one;
  }
  else
  {
    f(one);
    PRO("o");
    return two;
  }
}
 
z x(z one,z two)
{
  if(one.y[1].uc)
  {
    f(one);
    PRO("x");
    return no(two);
  }
  else
  {
    f(one);
    PRO("x");
    return two;
  }
}
 
uc lt1(z one,z two)
{
  if(e(one)==2)
  {
    f(one);
    f(two);
    PRO("lt1");
    return 0;
  }
  else if(one.y[3].uc<two.y[3].uc)
  {
    f(one);
    f(two);
    PRO("lt1");
    return 1;
  }
  else if(one.y[3].uc>two.y[3].uc)
  {
    f(one);
    f(two);
    PRO("lt1");
    return 0;
  }
  else
  {
    PRO("lt1");
    return lt1(pp(one),pp(two));
  }
}
 
z lt(z one,z two)
{
  if(e(one)<e(two)||(e(one)==e(two)&&lt1(c(one),c(two))))
  {
    f(two);
    one.y[1].uc=1;
    PRO("lt");
    return one;
  }
  else
  {
    f(one);
    two.y[1].uc=0;
    PRO("lt");
    return two;
  }
}
 
uc gt1(z one,z two)
{
  if(e(two)==2)
  {
    f(one);
    f(two);
    PRO("gt1");
    return 0;
  }
  else if(one.y[3].uc>two.y[3].uc)
  {
    f(one);
    f(two);
    PRO("gt1");
    return 1;
  }
  else if(one.y[3].uc<two.y[3].uc)
  {
    f(one);
    f(two);
    PRO("gt1");
    return 0;
  }
  else
  {
    PRO("gt1");
    return gt1(pp(one),pp(two));
  }
}
 
z gt(z one,z two)
{
  if(e(one)>e(two)||(e(one)==e(two)&&gt1(c(one),c(two))))
  {
    f(two);
    one.y[1].uc=1;
    PRO("gt");
    return one;
  }
  else
  {
    f(one);
    two.y[1].uc=0;
    PRO("gt");
    return two;
  }
}
 
uc q1(z one,z two)
{
  if(e(one)==2)
  {
    f(one);
    f(two);
    PRO("q1");
    return 1;
  }
  else
  {
    if(one.y[2].ul)
    {
      if(two.y[2].ul)
      {
        if(q1(t(c(one)),t(c(two))))
        {
          PRO("q1");
          return q1(p(one),p(two));
        }
        else
        {
          f(one);
          f(two);
          PRO("q1");
          return 0;
        }
      }
      else
      {
        f(one);
        f(two);
        PRO("q1");
        return 0;
      }
    }
    else
    {
      if(two.y[2].ul)
      {
        f(one);
        f(two);
        PRO("q1");
        return 0;
      }
      else
      {
        if(one.y[3].uc==two.y[3].uc)
        {
          PRO("q1");
          return q1(pp(one),pp(two));
        }
        else
        {
          f(one);
          f(two);
          PRO("q1");
          return 0;
        }
      }
    }
  }
}
 
z q(z one,z two)
{
  if(e(one)==e(two)&&q1(one,c(two)))
  {
    two.y[1].uc=1;
    PRO("q");
    return two;
  }
  else
  {
    two.y[1].uc=0;
    PRO("q");
    return two;
  }
}
 
uc ad1(uc one,uc two,uc carry)
{
  PRO("ad1");
  return one+two+carry>'0'+'9';
}
 
uc ad2(uc one,uc two,uc carry)
{
  uc compare=one+two+carry-'0';
  if(compare>'9')
  {
    PRO("ad2");
    return compare-10;
  }
  else
  {
    PRO("ad2");
    return compare;
  }
}
 
z ad3(z one,z two,uc carry,ul index1,ul index2)
{
  if(index1==2&&carry==0)
  {
    f(one);
    PRO("ad3");
    return two;
  }
  if(index2==2&&carry)
  {
    z val;
    val.uc='1';
    f(one);
    PRO("ad3");
    return ps(val,two);
  }
  uc one1;
  uc two1;
  if(index1==2)
  {
    one1='0';
  }
  else
  {
    one1=one.y[index1].uc;
    --index1;
  }
  if(index2==2)
  {
    two1='0';
  }
  else
  {
    two1=two.y[index2].uc;
    --index2;
  }
  uc temp=ad2(one1,two1,carry);
  two.y[index2+1].uc=temp;
  PRO("ad3");
  return ad3(one,two,ad1(one1,two1,carry),index1,index2);
}
 
z ad4(z one,z two)
{
  PRO("ad4");
  return ad3(one,two,0,e(one),e(two));
}
 
z ad(z one,z two)
{
  if(as(lt(c(one),c(two))))
  {
    PRO("ad");
    return ad4(one,two);
  }
  else
  {
    PRO("ad");
    return ad4(two,one);
  }
}
 
uc sb1(uc one,uc two,uc borrow)
{
  PRO("sb1");
  return one<two+borrow;
}
 
uc sb2(uc one,uc two,uc borrow)
{
  PRO("sb2");
  return (sb1(one,two,borrow)?one+'0'+10-two:one+'0'-two)-borrow;
}
 
z sb3(z one,z two,uc borrow,ul index1,ul index2)
{
  if(index2==2&&borrow==0)
  {
    f(two);
    PRO("sb3");
    return one;
  }
  uc one1;
  uc two1;
  if(index1==2)
  {
    one1='0';
  }
  else
  {
    one1=one.y[index1].uc;
    --index1;
  }
  if(index2==2)
  {
    two1='0';
  }
  else
  {
    two1=two.y[index2].uc;
    --index2;
  }
  uc temp=sb2(one1,two1,borrow);
  one.y[index1+1].uc=temp;
  PRO("sb3");
  return sb3(one,two,sb1(one1,two1,borrow),index1,index2);
}
 
z sb4(z value)
{
  if(e(value)==2)
  {
    PRO("sb4");
    return value;
  }
  else if(value.y[3].uc=='0')
  {
    PRO("sb4");
    return sb4(pp(value));
  }
  else
  {
    PRO("sb4");
    return value;
  }
}
 
z sb(z one,z two)
{
  PRO("sb");
  return sb4(sb3(one,two,0,e(one),e(two)));
}
 
z twice(z number)
{
  z result;
  result=ad(c(number),c(number));
  f(number);
  PRO("twice");
  return result;
}
 
z mu1(z one,z two,z control,z compare,z result)
{
  if(e(two)==2)
  {
    f(one);
    f(two);
    f(control);
    f(compare);
    PRO("mu1");
    return result;
  }
  else
  {
    if(as(gt(ad(t(c(control)),c(compare)),c(one))))
    {
      control=p(control);
      two=p(two);
    }
    else
    {
      compare=ad(compare,t(c(control)));
      control=p(control);
      result=ad(result,t(c(two)));
      two=p(two);
    }
    PRO("mu1");
    return mu1(one,two,control,compare,result);
  }
}
 
z mu2(z one,z two,z control)
{
  if(as(gt(t(c(control)),c(one))))
  {
    PRO("mu2");
    return mu1(one,p(two),p(control),n(),n());
  }
  else
  {
    z result;
    result=mu2(one,u(twice(t(c(two))),c(two)),u(twice(t(c(control))),c(control)));
    f(two);
    f(control);
    PRO("mu2");
    return result;
  }
}
 
z mu(z one,z two)
{
  if(e(one)==2||e(two)==2)
  {
    f(one);
    f(two);
    PRO("mu");
    return n();
  }
  else
  {
    z val;
    val.uc='1';
    PRO("mu");
    return mu2(one,u(two,n()),u(ps(val,n()),n()));
  }
}
 
z dv1(z one,z two,z control,z compare,z result)
{
  if(e(two)==2)
  {
    f(one);
    f(two);
    f(control);
    f(compare);
    PRO("dv1");
    return result;
  }
  else
  {
    if(as(gt(ad(t(c(two)),c(compare)),c(one))))
    {
      two=p(two);
      control=p(control);
    }
    else
    {
      compare=ad(compare,t(c(two)));
      two=p(two);
      result=ad(result,t(c(control)));
      control=p(control);
    }
    PRO("dv1");
    return dv1(one,two,control,compare,result);
  }
}
 
z dv2(z one,z two,z control)
{
  if(as(gt(t(c(two)),c(one))))
  {
    PRO("dv2");
    return dv1(one,p(two),p(control),n(),n());
  }
  else
  {
    z result;
    result=dv2(one,u(twice(t(c(two))),c(two)),u(twice(t(c(control))),c(control)));
    f(two);
    f(control);
    PRO("dv2");
    return result;
  }
}
 
z dv(z one,z two)
{
  if(e(one)==2)
  {
    f(one);
    f(two);
    PRO("dv");
    return n();
  }
  else
  {
    z val;
    val.uc='1';
    PRO("dv");
    return dv2(one,u(two,n()),u(ps(val,n()),n()));
  }
}
 
z md(z one,z two)
{
  PRO("md");
  return sb(one,mu(two,dv(c(one),c(two))));
}
 
void display1(z object)
{
  if(object.y[2].ul)
  {
    printf("[]");
  }
  else
  {
    printf("[%llu]",e(object)-2);
  }
  if(object.y[2].ul)
  {
    display1(t(c(object)));
    display1(p(object));
  }
  else
  {
    ul i;
    for(i=3;i<=e(object);++i)
    {
      printf("%c",object.y[i].uc);
    } 
    f(object);
  }
  PRO("display1");
}
 
void display(z object)
{
  if(object.y[1].uc==0)
  {
    printf("{false}");
  }
  display1(object);
  PRO("display");
}
 
void displayLine(z object)
{
  display(object);
  printf("\n");
  PRO("displayLine");
}
 
void displaySpace(z object)
{
  display(object);
  printf(" ");
  PRO("displaySpace");
}
 
z identity(z object)
{
  PRO("identity");
  return object;
}
 
z inc(z character)
{
  character.uc+=1;
  PRO("inc");
  return character;
}
 
z dec(z character)
{
  character.uc-=1;
  PRO("dec");
  return character;
}
 
z notB(z character)
{
  character.uc=character.uc!='3';
  PRO("notB");
  return character;
}
 
z tru(z value)
{
  z result;
  result.uc=1;
  f(value);
  PRO("tru");
  return result;
}
 
int main()
{
  PROFILE;
  z val;
  z fun;
  z fun2;
  z stack;
  z stack2;
  z stack3;
  stack=n();
  val.uc='3';
  stack=ps(val,stack);  
  val.uc='2';
  stack=ps(val,stack);
  val.uc='1';
  stack=ps(val,stack);
  val.uc='3';
  stack=ps(val,stack);
  val.uc='2';
  stack=ps(val,stack);
  val.uc='1';
  stack=ps(val,stack);
  val.uc='3';
  stack=ps(val,stack);
  val.uc='2';
  stack=ps(val,stack);
  val.uc='1';
  stack=ps(val,stack);
  val.uc='3';
  stack=ps(val,stack);
  val.uc='2';
  stack=ps(val,stack);
  val.uc='1';
  stack=ps(val,stack);
  val.uc='3';
  stack=ps(val,stack);
  val.uc='2';
  stack=ps(val,stack);
  val.uc='1';
  stack=ps(val,stack);
  displayLine(c(stack));
  stack2=c(stack);
  fun.f1=&identity;
  stack=mp(fun,stack);
  stack=mp(fun,stack);
  fun.f1=&inc;
  stack=mp(fun,stack);
  displayLine(c(stack));
  printf("  sb1sb2\n");
  printf("%d%c\n",sb1('0','9',1),sb2('0','9',1));
  printf("%d%c\n",sb1('9','9',1),sb2('9','9',1));
  printf("%d%c\n",sb1('9','8',1),sb2('9','8',1));
  printf("%d%c\n",sb1('0','9',0),sb2('0','9',0));
  printf("%d%c\n",sb1('9','9',0),sb2('9','9',0));
  printf("%d%c\n",sb1('9','8',0),sb2('9','8',0));
  printf("  sb\n");
  displayLine(sb(c(stack2),c(stack2)));
  displayLine(sb(c(stack2),pp(rv(c(stack2)))));
  printf("  ad1ad2\n");
  printf("%d%c\n",ad1('6','8',0),ad2('6','8',0));
  printf("%d%c\n",ad1('9','0',1),ad2('9','0',1));
  printf("  ad\n");
  displayLine(ad(c(stack2),c(stack2)));
  displayLine(ad(c(stack2),pp(rv(c(stack2)))));
 
  val.uc='2';
  stack3=ps(val,n());
  val.uc='0';
  stack3=ps(val,stack3);
  val.uc='1';
  stack3=ps(val,stack3);
  displayLine(c(stack3));
  displayLine(ad(c(stack3),c(stack3)));
 
  printf("  dv\n");
  displayLine(dv(n(),c(stack2)));
  displayLine(dv(c(stack2),c(stack2)));
  displayLine(dv(c(stack2),c(stack3)));
  displayLine(dv(c(stack3),c(stack2)));
  printf("  md\n");
  displayLine(md(c(stack2),c(stack3)));
  printf("  mu\n");
  displayLine(mu(n(),c(stack2)));
  displayLine(mu(c(stack2),n()));
  displayLine(mu(c(stack2),c(stack2)));
  printf("  mudvmd\n");
  displayLine(ad(md(c(stack2),c(stack3)),mu(c(stack3),dv(c(stack2),c(stack3)))));
  printf("  lt\n");
  displayLine(lt(c(stack2),c(stack)));
  displayLine(lt(c(stack),c(stack2)));
  displayLine(lt(c(stack2),rv(pp(c(stack)))));
  displayLine(lt(rv(pp(c(stack))),c(stack2)));
  printf("  gt\n");
  displayLine(gt(c(stack2),c(stack)));
  displayLine(gt(c(stack),c(stack2)));
  displayLine(gt(c(stack2),rv(pp(c(stack)))));
  displayLine(gt(rv(pp(c(stack))),c(stack2)));
  fun.f1=&notB;
  stack=kp(fun,stack);
  stack=kp(fun,stack);
  displayLine(c(stack));
  fun2.f2=&ps;
  stack=rd(n(),fun2,stack);
  stack=rd(n(),fun2,stack);
  displayLine(c(stack));
 
  stack=pp(stack);
  displayLine(c(stack));
  stack=rv(stack);
  displayLine(c(stack));
  stack=pp(stack);
  displayLine(c(stack));
  stack=rv(stack);
  displayLine(c(stack));
  stack=pp(stack);
  displayLine(c(stack));
  stack=rv(stack);
  displayLine(c(stack));
  stack=pp(stack);
  displayLine(c(stack));
  stack=rv(stack);
  displayLine(c(stack));
  stack=pp(stack);
  displayLine(c(stack));
  stack=rv(stack);
  displayLine(c(stack));
  stack=pp(stack);
  displayLine(c(stack));
  stack=rv(stack);
  displayLine(c(stack));
  stack=pp(stack);
  displayLine(c(stack));
  stack=rv(stack);
  displayLine(c(stack));
  stack=pp(stack);
  displayLine(c(stack));
  stack=rv(stack);
  displayLine(c(stack));
  stack=pp(stack);
  displayLine(c(stack));
  stack=rv(stack);
  displayLine(c(stack));
  stack=pp(stack);
  displayLine(c(stack));
  stack=rv(stack);
  displayLine(c(stack));
 
  f(stack);
  stack=c(stack2);
  f(stack2);
  stack2=u(u(c(stack),c(stack)),u(u(c(stack),c(stack)),u(u(c(stack),c(stack)),n())));
  displayLine(c(stack2));
  displayLine(nu(c(stack2)));
  fun.f1=&identity;
  stack2=m(fun,stack2);
  stack2=m(fun,stack2);
  fun.f1=&tru;
  stack2=k(fun,stack2);
  stack2=k(fun,stack2);
  fun2.f2=&u;
  stack2=r(n(),fun2,stack2);
  stack2=r(n(),fun2,stack2);
  stack2=v(stack2);
  stack2=p(stack2);
  stack2=t(stack2);
  stack2=p(stack2);
  printf("%d\n",as(no(c(stack2))));
  displayLine(c(stack2));
 
  printf("  nu\n");
  displayLine(nu(n()));
  displayLine(nu(no(n())));
  displayLine(nu(c(stack2)));
  displayLine(nu(no(c(stack2))));
 
  printf("  pr\n");
  displayLine(pr(n()));
  displayLine(pr(no(c(stack2))));
  displayLine(pr(u(c(stack2),c(stack2))));
  displayLine(pr(no(u(c(stack2),c(stack2)))));
 
  printf("  a\n");
  displayLine(a(no(n()),no(n())));
  displayLine(a(no(n()),n()));
  displayLine(a(n(),no(n())));
  displayLine(a(n(),n()));
  
  printf("  o\n");
  displayLine(o(no(n()),no(n())));
  displayLine(o(no(n()),n()));
  displayLine(o(n(),no(n())));
  displayLine(o(n(),n()));
 
  printf("  x\n");
  displayLine(x(no(n()),no(n())));
  displayLine(x(no(n()),n()));
  displayLine(x(n(),no(n())));
  displayLine(x(n(),n()));
 
  printf("  q\n");
  displayLine(q(n(),n()));
  displayLine(q(n(),c(stack2)));
  displayLine(q(c(stack2),n()));
  displayLine(q(c(stack2),c(stack2)));
  printf("  q\n");
  displayLine(q(u(c(stack2),c(stack2)),c(stack2)));
  displayLine(q(c(stack2),u(c(stack2),c(stack2))));
  val.uc='x';
  displayLine(q(u(c(stack2),rv(ps(val,pp(c(stack2))))),u(c(stack2),rv(c(stack2)))));
  displayLine(q(u(c(stack2),rv(c(stack2))),u(c(stack2),rv(ps(val,pp(c(stack2)))))));
 
  f(stack);
  return 0;
}
